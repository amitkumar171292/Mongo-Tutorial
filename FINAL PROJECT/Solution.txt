// Lab 1A
this.getCategories = function(callback) {
    "use strict";

    var pipeline = [
        {"$group": {_id: "$category",
                    num: {"$sum" : 1}
                   } },
        {"$sort": {_id: 1} }
    ];

    this.db.collection("item").aggregate(pipeline).toArray(function(err, categories) {
        assert.equal(null, err);

        var total = 0;
        for (var i=0; i<categories.length; i++) {
            total += categories[i].num;
        }

        categories.unshift({_id: "All", num: total});

        callback(categories);
    });
}


// Lab 1B
this.getItems = function(category, page, itemsPerPage, callback) {
    "use strict";

    var queryDoc;
    if (category == "All") {
        queryDoc = {};
    } else {
        queryDoc = {category: category};
    }

    var cursor = this.db.collection("item").find(queryDoc);
    cursor.skip(page*itemsPerPage);
    cursor.limit(itemsPerPage);
    cursor.toArray(function(err, pageItems) {
        assert.equal(null, err);
        callback(pageItems);
    });
}


// Lab 1C
this.getNumItems = function(category, callback) {
    "use strict";

    var queryDoc;
    if (category == "All") {
        queryDoc = {};
    } else {
        queryDoc = {category: category};
    }

    this.db.collection("item").find(queryDoc).count(function(err, count) {
        assert.equal(null, err);
        callback(count);
    });
}

// Lab 2A
this.searchItems = function(query, page, itemsPerPage, callback) {
    "use strict";

    var queryDoc;
    if (query.trim() == "") {
        queryDoc = {};
    } else {
        queryDoc = { "$text": {"$search": query} };
    }

    var cursor = this.db.collection("item").find(queryDoc);
    cursor.skip(page*itemsPerPage);
    cursor.limit(itemsPerPage);
    cursor.toArray(function(err, pageItems) {
        assert.equal(null, err);
        callback(pageItems);
    });
}

// Lab 2B
this.getNumSearchItems = function(query, callback) {
    "use strict";

    var queryDoc;
    if (query.trim() == "") {
        queryDoc = {};
    } else {
        queryDoc = { "$text": {"$search": query} };
    }

    this.db.collection("item").find(queryDoc).count(function(err, count) {
        assert.equal(null, err);
        callback(count);
    });
}

this.getItem = function(itemId, callback) {
    "use strict";

    this.db.collection("item").find({_id: itemId}).toArray(function(err, docs) {
        assert.equal(null, err);

        var itemDoc = null;
        if (docs.length > 0) {
            itemDoc = docs[0];
        }

        callback(itemDoc);

    });
};



this.addReview = function(itemId, comment, name, stars, callback) {
    "use strict";

    var reviewDoc = {
        name: name,
        comment: comment,
        stars: stars,
        date: Date.now()
    }

    this.db.collection("item").updateOne(
        {_id: itemId},
        {"$push": {reviews: reviewDoc}},
        function(err, doc) {
            assert.equal(null, err);
            callback(doc);
        });
};


this.getCart = function(userId, callback) {
    "use strict";

    // This could also be implemented using a technique similar to what we did with getItem() in Lab 3.
    this.db.collection("cart").find({userId: userId}).limit(1).next(function(err, doc) {
        assert.equal(null, err);
        assert.ok(doc);

        callback(doc);
    });
}